Putty-X README:

Putty-X is a customized version of Putty that behaves more similar to RXVT-Unicode (and Xterm). It implements proper mouse support for all extended modes, much better meta-key combination support (mirroring Xterm/Mintty, supporting meta character prefixes for function, arrow, and other keys), italic text support, better bold font rendering (no jagged edges and ability to independently control bold font color - like with real *nix terminals), and ability to read settings from Xresources file.

To read settings from Xresources file, first point Putty-X to the location of the file (from Xresources portion of the config). Then tell it which classes to read settings from (by default, it will read Rxvt, URxvt, and Putty). The setting names default to the same ones as in pterm (http://linux.die.net/man/1/pterm), but you can remap additional ones in Xresources portion of the config. For example, the following map will map RXVT-Unicode colors from Xresources to Putty:

Original            Putty
-------------------------------
color0              Colour6
color1              Colour8
color2              Colour10
color3              Colour12
color4              Colour14
color5              Colour16
color6              Colour18
color7              Colour20
color8              Colour7
color9              Colour9
color10             Colour11
color11             Colour13
color12             Colour15
color13             Colour17
color14             Colour19
color15             Colour21
cursorColor         Colour5
cursorBlink         BlinkCur

You can map other properties in a similar manner. Putty-X will automatically convert colors from hex format (#ffffff) to one Putty uses, and will do the same with booleans. This is not true of all properties, however. In the future I might embed lua into Putty-X for scripting to remedy that, but since Putty-X already suits all my needs, that's a relatively low priority task for me.


Original README:

This is the README for the source archive of PuTTY, a free Win32
and Unix Telnet and SSH client.

If you want to rebuild PuTTY from source, we provide a variety of
Makefiles and equivalents. (If you have fetched the source from
Subversion, you'll have to generate the Makefiles yourself -- see
below.)

There are various compile-time directives that you can use to
disable or modify certain features; it may be necessary to do this
in some environments. They are documented in `Recipe', and in
comments in many of the generated Makefiles.

For building on Windows:

 - windows/Makefile.vc is for command-line builds on MS Visual C++
   systems. Change into the `windows' subdirectory and type `nmake
   -f Makefile.vc' to build all the PuTTY binaries.

   Last time we checked, PuTTY built with vanilla VC7, or VC6 with
   an up-to-date Platform SDK. (It might still be possible to build
   with vanilla VC6, but you'll certainly have to remove some
   functionality with directives such as NO_IPV6.)

   (We've also had reports of success building with the
   OpenWatcom compiler -- www.openwatcom.org -- using Makefile.vc
   with `wmake -ms -f makefile.vc' and NO_MULTIMON, although we
   haven't tried this ourselves. Version 1.3 is reported to work.)

 - Inside the windows/MSVC subdirectory are MS Visual Studio project
   files for doing GUI-based builds of the various PuTTY utilities.
   These have been tested on Visual Studio 6.

   You should be able to build each PuTTY utility by loading the
   corresponding .dsp file in Visual Studio. For example,
   MSVC/putty/putty.dsp builds PuTTY itself, MSVC/plink/plink.dsp
   builds Plink, and so on.

 - windows/Makefile.bor is for the Borland C compiler. Type `make -f
   Makefile.bor' while in the `windows' subdirectory to build all
   the PuTTY binaries.

 - windows/Makefile.cyg is for Cygwin / mingw32 installations. Type
   `make -f Makefile.cyg' while in the `windows' subdirectory to
   build all the PuTTY binaries.

   You'll probably need quite a recent version of the w32api package.
   Note that by default the multiple monitor and HTML Help support are
   excluded from the Cygwin build, since at the time of writing Cygwin
   doesn't include the necessary headers.

 - windows/Makefile.lcc is for lcc-win32. Type `make -f
   Makefile.lcc' while in the `windows' subdirectory. (You will
   probably need to specify COMPAT=-DNO_MULTIMON.)

 - Inside the windows/DEVCPP subdirectory are Dev-C++ project
   files for doing GUI-based builds of the various PuTTY utilities.

The PuTTY team actively use Makefile.vc (with VC7) and Makefile.cyg
(with mingw32), so we'll probably notice problems with those
toolchains fairly quickly. Please report any problems with the other
toolchains mentioned above.

For building on Unix:

 - unix/configure is for Unix and GTK. If you don't have GTK, you
   should still be able to build the command-line utilities (PSCP,
   PSFTP, Plink, PuTTYgen) using this script. To use it, change
   into the `unix' subdirectory, run `./configure' and then `make'.

   Note that Unix PuTTY has mostly only been tested on Linux so far;
   portability problems such as BSD-style ptys or different header file
   requirements are expected.

 - unix/Makefile.gtk and unix/Makefile.ux are for non-autoconfigured
   builds. These makefiles expect you to change into the `unix'
   subdirectory, then run `make -f Makefile.gtk' or `make -f
   Makefile.ux' respectively. Makefile.gtk builds all the programs but
   relies on Gtk, whereas Makefile.ux builds only the command-line
   utilities and has no Gtk dependence.

 - For the graphical utilities, Gtk+-1.2 and Gtk+-2.0 should both be
   supported.

 - Both Unix Makefiles have an `install' target. Note that by default
   it tries to install `man' pages, which you may need to have built
   using Halibut first -- see below.

All of the Makefiles are generated automatically from the file
`Recipe' by the Perl script `mkfiles.pl'. Additions and corrections
to Recipe and the mkfiles.pl are much more useful than additions and
corrections to the alternative Makefiles themselves.

The Unix `configure' script and its various requirements are generated
by the shell script `mkauto.sh', which requires GNU Autoconf, GNU
Automake, and Gtk; if you've got the source from Subversion rather
than using one of our source snapshots, you'll need to run this
yourself.

Documentation (in various formats including Windows Help and Unix
`man' pages) is built from the Halibut (`.but') files in the `doc'
subdirectory using `doc/Makefile'. If you aren't using one of our
source snapshots, you'll need to do this yourself. Halibut can be
found at <http://www.chiark.greenend.org.uk/~sgtatham/halibut/>.

The PuTTY home web site is

    http://www.chiark.greenend.org.uk/~sgtatham/putty/

If you want to send bug reports or feature requests, please read the
Feedback section of the web site before doing so. Sending one-line
reports saying `it doesn't work' will waste your time as much as
ours.

See the file LICENCE for the licence conditions.
